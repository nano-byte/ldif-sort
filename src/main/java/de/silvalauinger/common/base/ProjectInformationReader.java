package de.silvalauinger.common.base;

import com.google.common.base.Charsets;
import static com.google.common.base.Preconditions.checkNotNull;
import com.google.common.collect.ImmutableList;
import com.google.common.io.Resources;
import static com.google.common.io.Resources.*;
import java.io.IOException;
import java.nio.file.Path;

/**
 * @author <a href="mailto:simonsilvalauinger@gmail.com">Simon E. Silva
 * Lauinger</a>
 */
public final class ProjectInformationReader {

    //<editor-fold defaultstate="collapsed" desc="attributes">
    private final Path programNamePath;
    private final Path versionPath;
    private final Path copyingPath;
    private final Path authorsPath;
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="constructors">
    public ProjectInformationReader(final Path toProgramNameFile, final Path toVersionFile, final Path toCopyingFile, final Path toAuthorsFile) {
	this.programNamePath = checkNotNull(toProgramNameFile);
	this.versionPath = checkNotNull(toVersionFile);
	this.copyingPath = checkNotNull(toCopyingFile);
	this.authorsPath = checkNotNull(toAuthorsFile);
    }
    //</editor-fold>

    /**
     * Generates a {@link ProjectInformation} by reading out information from
     * the default project files {@link ProjectInformationReader#programNamePath},
     * {@link ProjectInformationReader#versionPath},
     * {@link ProjectInformationReader#copyingPath} and
     * {@link ProjectInformationReader#authorsPath}.
     *
     * @return A {@link ProjectInformation} generated by reading default project
     * files.
     * @throws IllegalArgumentException If {@link ProjectInformationReader#programNamePath},
     * {@link ProjectInformationReader#versionPath},
     * {@link ProjectInformationReader#copyingPath} or
     * {@link ProjectInformationReader#authorsPath} is not found.
     * @throws IOException If an I/O exception occurs while reading {@link ProjectInformationReader#programNamePath},
     * {@link ProjectInformationReader#versionPath},
     * {@link ProjectInformationReader#copyingPath} or
     * {@link ProjectInformationReader#authorsPath}.
     */
    public ProjectInformation read() throws IllegalArgumentException, IOException {
	return new ProjectInformation(readProgramName(), readVersion(), readCopying(), readAuthors());
    }

    /**
     * Reads the program's name from
     * {@link ProjectInformationReader#programNamePath}.
     *
     * @return The current program name.
     * @throws IllegalArgumentException If
     * {@link ProjectInformationReader#programNamePath} is not found.
     * @throws IOException If an I/O exception occurs while reading
     * {@link ProjectInformationReader#programNamePath}.
     */
    private String readProgramName() throws IllegalArgumentException, IOException {
	return Resources.toString(getResource(programNamePath.toString()), Charsets.ISO_8859_1);
    }

    /**
     * Reads the program's version from
     * {@link ProjectInformationReader#versionPath}.
     *
     * @return The current program version.
     * @throws IllegalArgumentException If
     * {@link ProjectInformationReader#versionPath} is not found.
     * @throws IOException If an I/O exception occurs while reading
     * {@link ProjectInformationReader#versionPath}.
     */
    private String readVersion() throws IllegalArgumentException, IOException {
	return Resources.toString(getResource(versionPath.toString()), Charsets.ISO_8859_1);
    }

    /**
     * Reads the program's authors from
     * {@link ProjectInformationReader#authorsPath}. Every line in the file
     * corresponds to one author.
     *
     * @return The lines of {@link ProjectInformationReader#authorsPath}.
     * @throws IllegalArgumentException If
     * {@link ProjectInformationReader#authorsPath} is not found.
     * @throws IOException If an I/O exception occurs while reading
     * {@link ProjectInformationReader#authorsPath}.
     */
    private ImmutableList<String> readAuthors() throws IllegalArgumentException, IOException {
	return ImmutableList.copyOf(readLines(getResource(authorsPath.toString()), Charsets.ISO_8859_1));
    }

    /**
     * Reads tho program's copying from
     * {@link ProjectInformationReader#copyingPath}.
     *
     * @return The content of {@link ProjectInformationReader#copyingPath}.
     * @throws IllegalArgumentException If
     * {@link ProjectInformationReader#copyingPath} is not found.
     * @throws IOException If an I/O exception occurs while reading
     * {@link ProjectInformationReader#copyingPath}.
     */
    private String readCopying() throws IllegalArgumentException, IOException {
	return Resources.toString(getResource(copyingPath.toString()), Charsets.ISO_8859_1);
    }
}
